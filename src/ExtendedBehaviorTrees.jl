
# GENERATED FROM ExtendedBehaviorTrees.org.
# DO NOT EDIT THIS FILE!

# Copyright © 2014, Matthias Hölzl
# Licensed under the MIT license, see the file LICENSE.md.

module ExtendedBehaviorTrees

abstract XbtNodeStatus;
immutable Succeeded <: XbtNodeStatus
    value
end;
immutable Failed <: XbtNodeStatus end;
immutable Running <: XbtNodeStatus end;
typealias XbtResult (XbtNodeStatus,Bool);

type Env
end;

abstract XbtNode;
abstract AtomicXbtNode <: XbtNode;
abstract CompositeXbtNode <: XbtNode;

immutable XbtTask <: AtomicXbtNode
    task::Task
end;

function tick(node::XbtTask, env)
    consume(node.task);
end;

immutable XbtFun <: AtomicXbtNode
    fun::Function
end;

function tick(node::XbtFun, Env)
    node.fun();
end;

abstract XbtSequenceNode <: CompositeXbtNode;

function tick(node::XbtSequenceNode, env::Env)
    local sum = 0, status, cont;
    for child in node.children
        status, cont = tick(child);
        if isa(status, Failed) return (status, false) end;
        if isa(status, Running) return (status, true) end;
        sum += status.value;
    end;
    # TODO: what about continuing?
    return Succeeded(sum, false), cont;
end;

immutable XbtSeq <: XbtSequenceNode
    children::AbstractArray{XbtNode,1}
end;

abstract XbtChoiceNode <: CompositeXbtNode;

function tick(node::XbtChoiceNode, env::Env)
    local status, cont;
    for child in node.children
        status, cont = tick(child);
        if isa(status, Succeeded) return (status, cont) end;
        if isa(status, Running) return (status, true) end;
    end;
    return Failed(), cont;
end;

immutable XbtChoice <: XbtChoiceNode
    children::AbstractArray{XbtNode,1}
end;

end; # module ExtendedBehaviorTrees
